class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null ||lists.length==0){//?
         return null;
        }
        return mergeKLists(lists,0,lists.length-1);
    }
        private ListNode mergeKLists(ListNode[] lists, int start, int end) {
        if (start > end) {
            return null;
        }
        if (start == end) {
            return lists[start];
        }
        int mid = start + (end - start) / 2;
        ListNode left = mergeKLists(lists, start, mid);
        ListNode right = mergeKLists(lists, mid + 1, end);
        
        return merge(left, right);
    }

     private ListNode merge(ListNode left, ListNode right) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        
        while (left != null && right != null) {
            if (left.val < right.val) {
                curr.next = left;
                left = left.next;
            } else {
                curr.next = right;
                right = right.next;
            }
            curr = curr.next;
        }
        
        if (left != null) {
            curr.next = left;
        }
        
        if (right != null) {
            curr.next = right;
        }
        
        return dummy.next;
    }
}